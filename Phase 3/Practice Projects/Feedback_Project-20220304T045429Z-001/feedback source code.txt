            FEEDBACK SOURCE CODE

1)rest_controller :=

package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.demo.model.Feedback;

import com.example.demo.repository.FeedbackRepository;

//@author Kavitha S

@RestController

@RequestMapping("feedback")
public class Rest_Controller {

	@Autowired
	FeedbackRepository feedbackrepo;

	@GetMapping("Listfeedback")
	public List<Feedback> getAllfeedback() {
		List<Feedback> feedback = (List<Feedback>) feedbackrepo.findAll();
		return feedback;
	}

	@PostMapping("addfeedback")
	public Feedback addfeedbacks(@RequestBody Feedback feedback) {
		return feedbackrepo.save(feedback);
	}

	@GetMapping("feedback/{id}")
	public Optional<Feedback> getfeedbackById(@PathVariable int id) {

		return feedbackrepo.findById(id);
	}

	@PutMapping("updatefeedback/{id}")
	public Feedback updatefeedbackById(@RequestBody Feedback feedback, @PathVariable int id) {
		feedback.setId(id);
		return feedbackrepo.save(feedback);
	}

	@DeleteMapping("deletefeedback/{id}")
	public void deletefeedback(@PathVariable int id) {
		feedbackrepo.deleteById(id);
	}

}
2)web_controller
package com.example.demo.controller;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.model.Feedback;
import com.example.demo.repository.FeedbackRepository;


@Controller

public class Web_Controller {

	@Autowired
	FeedbackRepository feedbackrepo;
	

	
	@RequestMapping(value="/feedbackhome")
	public ModelAndView Feedbackhome() {
		ModelAndView modelAndView = new ModelAndView("userfeedback");
	
		return modelAndView;
	}
	
	
	@RequestMapping(value="addtotable")
	public ModelAndView Addtotable(Feedback feedback )  {
		ModelAndView modelAndView = new ModelAndView("userfeedback");
		modelAndView.addObject("response_feed", "Feedback Stored Succesfully  !!!");
	
		System.out.println("Model Attribute:"+feedback );
		feedbackrepo.save(feedback);
			    
		return modelAndView;
		
		
	}
		
}
3)feedback.java

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import org.springframework.transaction.annotation.EnableTransactionManagement;  

//@author Kavitha S

@Entity
@Table(name= "Feedback") 
@EnableTransactionManagement
public class Feedback { 

	@Id 
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "Id", updatable = false, nullable = false)
	private int Id;
	
	@Column(name = "Comments", length = 75)
	private String Comments;

	public Feedback(int id, String comments) {
		super();
		Id = id;
		Comments = comments;
	}

	public Feedback() {
		super();
		// TODO Auto-generated constructor stub
	}

	public int getId() {
		return Id;
	}

	public void setId(int id) {
		Id = id;
	}

	public String getComments() {
		return Comments;
	}

	public void setComments(String comments) {
		Comments = comments;
	}	
	@Override
	public String toString() {
		return "Feedback [Id=" + Id + ", Comments=" + Comments + "]";
	}

	
}

